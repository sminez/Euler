#!/usr/bin/env python3.4

"""Find the smallest number that can be evenly divided by [1,2,3...n] without remainder. """

# List the prime factors of each number in the list and then filter out repeats
# NOTE:: correct solution == product[2,2,2,2,3,3,5,7,11,13,17,19]
# list generated by finding prime factors of 1-20 and filtering out repeats

from euler import e_sieve, factorise
from collections import Counter
import time


def euler5():
    # -- Setup the list of primes and divisors
    one_to_n = int(input("\nPlease specify a value for the upper bound:\n"))
    start = time.time()
    primes = e_sieve(one_to_n, False)
    lcm_factors = primes[:]
    print("Required primes::")
    print(primes)
    divs = [x for x in range(2, one_to_n + 1)]
    print("Values to consider::")
    divs = divs[::-1]
    print(str(divs) + "\n")
    for divisor in divs:
        current_factors = factorise(divisor, primes)
        # print(divisor, current_factors)
        factor_count = Counter()
        lcm_count = Counter()
        for c in current_factors:
            factor_count[c] += 1
        # print("Factor count for current divisor::" + str(factor_count))
        for l in lcm_factors:
            lcm_count[l] += 1
        lcm_count = lcm_count | factor_count
        # print("Current required factors for the LCM::" + str(lcm_count))
        lcm_factors = list(lcm_count.elements())
        # print("\n")

    # outputting the answer
    lcm_factors.sort()
    print("The factors of the LCM are:: " + str(lcm_factors))
    lcm = 1
    for f in lcm_factors:
        lcm *= f

    finish = (time.time() - start)
    print("The Lowest Common Multiple is:: " + str(lcm))
    print("Solution found in " + str("{0:.5f}".format(finish)) + " seconds.")

if __name__ == "__main__":
    euler5()
